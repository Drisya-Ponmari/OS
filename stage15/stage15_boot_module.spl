//load the library 
loadi(63,13);
loadi(64,14);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);


//load init program
loadi(65,7);
loadi(66,8);

//load interrpt -10 routine
loadi(22,35);
loadi(23,36);

//load exception handler
loadi(2,15);
loadi(3,16);

//load timer interrupt routine
loadi(4,17);
loadi(5,18);

//load interrupt - 7 routine
loadi(16,29);
loadi(17,30);

//load exec program
loadi(73,69);

//load context switch module(module_5)
loadi(50,63);
loadi(51,64);
//Initialising the status field
[TERMINAL_STATUS_TABLE] =0;
//init program
PTBR=PAGE_TABLE_BASE + 20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

PTLR = 10;
//User Area Page Number
[PROCESS_TABLE + 16 + 11] = 80;

//user stack pointer
[PROCESS_TABLE + 16 + 13] = 8*512;

//kptr
[PROCESS_TABLE + 16 + 12] = 0;

//PTBR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;

//PTLR
[PROCESS_TABLE + 16 + 15] = 10;

//State
[PROCESS_TABLE + 16 + 4] = CREATED;

//Process Id
[PROCESS_TABLE + 16 + 1] = 1;

[76*512] = [65*512+1];

//second process

PTBR = PAGE_TABLE_BASE + 40;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 74;
[PTBR+5] = "0110";
[PTBR+6] = 75;
[PTBR+7] = "0110";

//code
[PTBR+8] = 73;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 71;
[PTBR+17] = "0110";
[PTBR+18] = 72;
[PTBR+19] = "0110";

PTLR = 10;
//User Area Page Number
[PROCESS_TABLE + (2*16) + 11] = 83;

//user stack pointer
[PROCESS_TABLE + (2*16) + 13] = 8*512;

//kptr
[PROCESS_TABLE + (2*16) + 12] = 0;

//PTBR
[PROCESS_TABLE + (2*16) + 14] = PAGE_TABLE_BASE + 40;

//PTLR
[PROCESS_TABLE + (2*16) + 15] = 10;

//State
[PROCESS_TABLE + (2*16) + 4] = CREATED;

//Process Id
[PROCESS_TABLE + (2*16) + 1] = 2;

[71*512] = [73*512+1];

alias counter R0;
counter = 3;
while(counter <16) do
	[PROCESS_TABLE + (counter*16) + 4] = TERMINATED;
	counter = counter + 1;
endwhile;

return;
