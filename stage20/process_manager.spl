alias funcNum R1;               // Function Number

if(funcNum == 1) then           // Get PCB entry

    alias freeEntry R2;
    freeEntry = 1;
    while(freeEntry < MAX_PROC_NUM) do
        if([PROCESS_TABLE + 16 * freeEntry + 4] == TERMINATED) then
            break;
        endif;
        freeEntry = freeEntry + 1;
    endwhile;

    if(freeEntry == MAX_PROC_NUM) then
        R0 = -1;
        return;
    endif;

    [PROCESS_TABLE + 16 * freeEntry + 1] = freeEntry;                           // PID
    [PROCESS_TABLE + 16 * freeEntry + 4] = ALLOCATED;                           // State
    [PROCESS_TABLE + 16 * freeEntry + 14] = PAGE_TABLE_BASE + 20 * freeEntry;   // PTBR
    [PROCESS_TABLE + 16 * freeEntry + 15] = 10;                                 // PTLR

    R0 = freeEntry;
    return;

endif;

if(funcNum == 2) then           // Free user area page

    alias PID R2;               // First Argument (PID)
    alias userPage R3;
    userPage = [PROCESS_TABLE + PID * 16 + 11];

    multipush(R1, R2, R3);
    R1 = 2;                     // Release Page function number
    R2 = userPage;              // Page to be deallocated
    call MEMORY_MANAGER;        // Call memory manager module
    multipop(R1, R2, R3);

    return;

endif;

if(funcNum == 3) then           // Exit Process

    alias PID R2;               // First Argument (PID)

    multipush(R1, R2);          // Freeing Page Table contents
    R1 = 4;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    multipush(R1, R2);          // Freeing User Page area
    R1 = 2;
    call PROCESS_MANAGER;
    multipop(R1, R2);

    [PROCESS_TABLE + PID * 16 + 4] = TERMINATED;    // Set state to TERMINATED
    
    return;

endif;

if(funcNum == 4) then           // Free Page Table

    alias PID R2;               // First Argument (PID)

    alias page_table R3;
    page_table = PAGE_TABLE_BASE + PID * 20;

    [page_table + 0] = -1;      // Invalidating Library pages
    [page_table + 1] = "0000";
    [page_table + 2] = -1;
    [page_table + 3] = "0000";
    
    alias i R4;
    i = 4;

    alias pageDel R5;           // Would store page no of page to be deallocated

    while(i < 20) do

        if([page_table + i] != -1) then             // If page was valid, deallocate it
            
            pageDel = [page_table + i];
            multipush(R1, R2, R3, R4);
            R1 = 2;
            R2 = pageDel;
            call MEMORY_MANAGER;
            multipop(R1, R2, R3, R4);

            [page_table + i] = -1;
            [page_table + i + 1] = "0000";

        endif;

        i = i + 2;

    endwhile;

    // Heap
    i = 2;                  // Release any heap pages present in the disk
    while(i <= 3) do
        if([DISK_MAP_TABLE + 10 * PID + i] != -1) then  // If heap page is stored in some block, do the following

            R6 = [DISK_MAP_TABLE + 10 * PID + i];       // Get disk block number of where the heap page is stored
            R7 = PID;                                   // Get PID of the process

            multipush(R1, R2, R3, R4, R5);              // Push all regs used
            R1 = 4;                                     // invoke Release Block function
            R2 = R6;                                    // Store block number
            R3 = R7;                                    // Store PID
            call MEMORY_MANAGER;                        // call memory manager
            multipop(R1, R2, R3, R4, R5);               // Pop all registers used
        
        endif;
        i = i + 1;
    endwhile;

    // Stack
    i = 8;                  // Release any stack pages present in the disk
    while(i <= 9) do
        if([DISK_MAP_TABLE + 10 * PID + i] != -1) then  // If stack page is stored in some block, do the following
            
            R6 = [DISK_MAP_TABLE + 10 * PID + i];       // Get disk block number of where the stack page is stored
            R7 = PID;                                   // Get PID of the process

            multipush(R1, R2, R3, R4, R5);              // Push all regs used
            R1 = 4;                                     // invoke Release Block function
            R2 = R6;                                    // Store block number
            R3 = R7;                                    // Store PID
            call MEMORY_MANAGER;                        // call memory manager
            multipop(R1, R2, R3, R4, R5);               // Pop all registers used
        
        endif;
        i = i + 1;
    endwhile;

    // Invalidate all entries in the disk map Table
    i = 2;
    while(i <= 9) do
        [DISK_MAP_TABLE + 10 * PID + i] = -1;           // Invalidate entry
        i = i + 1;
    endwhile;

    return;

endif;
