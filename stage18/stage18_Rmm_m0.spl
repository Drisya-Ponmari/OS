alias functionNum R1;
alias currentPID R2;

if(functionNum ==8)
then
	while ([TERMINAL_STATUS_TABLE] ==1) do  //the current process shoul wait in a loop until the terminal is free
	
		[PROCESS_TABLE + (currentPID *16) + 4] =WAIT_TERMINAL; //current process state changed
		multipush(R1,R2); 

		call MOD_5; //calling scheduler

		multipop(R1,R2);
	endwhile;
	
	[TERMINAL_STATUS_TABLE] =1;
	[TERMINAL_STATUS_TABLE +1 ] =currentPID;
	
	return;
endif;

if(functionNum ==9) then

	if(currentPID != [TERMINAL_STATUS_TABLE +1 ]) //current pid should be same to the pid in terminal status table
	then
		R0=-1;
		return;
	endif;
	
	[TERMINAL_STATUS_TABLE] =0;
	
	alias count R7;
	count = 0;
	while(count <16) do
	
		if( ([PROCESS_TABLE + (count *16) + 1] > 0) &&   ([PROCESS_TABLE + (count *16) + 4] ==WAIT_TERMINAL))
		then
			 [PROCESS_TABLE + (count *16) + 4] =READY;
		endif;
		
		count = count +1;
	endwhile;
	R0 = 0;
	return;
endif;

//Acquire Disk

if(functionNum == 3) then
	while([DISK_STATUS_TABLE] == 1) do
	
		[PROCESS_TABLE + (currentPID *16) + 4] =WAIT_DISK;
		
		multipush(R1,R2); 

		call MOD_5; //calling scheduler

		multipop(R1,R2);
		
	endwhile;
	
	[DISK_STATUS_TABLE] =1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	return;
endif;
