[PROCESS_TABLE  +  ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 9] = 8;
[PROCESS_TABLE  +  ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 13] = SP;
SP = [PROCESS_TABLE  +  ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 11] * 512 -1;
R1 = 1;
call MOD_1;
alias childpid R1;
childpid = R0;

if(childpid == -1) then
	alias physicalAddrRetVal R3;
	physicalAddrRetVal = ([PTBR + 2 * (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] - 1) / 512)] * 512) + (([PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] - 1) % 512);
	[physicalAddrRetVal] = -1;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
	SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
	ireturn;
endif;


//get free page for stack

multipush(R1);
R1 = 1;
call MOD_2;
multipop(R1);

[PAGE_TABLE_BASE + 20 * childpid + 16 ] = R0;
[PAGE_TABLE_BASE + 20 * childpid + 17] = "0110";

//get free page for stack

multipush(R1);
R1 = 1;
call MOD_2;
multipop(R1);

[PAGE_TABLE_BASE + 20 * childpid + 18 ] = R0;
[PAGE_TABLE_BASE + 20 * childpid + 19] = "0110";

//get free page for user area page
multipush(R1);
R1 = 1;
call MOD_2;
multipop(R1);

[PROCESS_TABLE + (childpid * 16) + 11] = R0;			//User area page
[PROCESS_TABLE + (childpid * 16) + 3] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 3];					//userid
[PROCESS_TABLE + (childpid * 16) + 6] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 6];					//swap flag
[PROCESS_TABLE + (childpid * 16) + 10] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 10];					// userareaswapstatus
[PROCESS_TABLE + (childpid * 16) + 7] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 7];					//Inode index
[PROCESS_TABLE + (childpid * 16) + 13] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];					//UPTR
[PROCESS_TABLE + (childpid * 16) + 9] = 0;				//Mode flag
[PROCESS_TABLE + (childpid * 16) + 0] = 0;				//TICK
[PROCESS_TABLE + (childpid * 16) + 12] = 0;			//KTPR
[PROCESS_TABLE + (childpid * 16) + 2] = [SYSTEM_STATUS_TABLE + 1];	//PPID
[PROCESS_TABLE + (childpid * 16) + 4] = CREATED;			//State


alias UserAreaPagep R2;
alias UserAreaPagec R3;

alias counter R4;
UserAreaPagep = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]) * 512 + (512 - 16);
UserAreaPagec =  ([PROCESS_TABLE + (childpid * 16) + 11]) * 512 + (512 - 16);

counter = 0;
while(counter < 16) do
	[UserAreaPagec + counter] = [UserAreaPagep + counter];
	[UserAreaPagec + counter + 1] = [UserAreaPagep + counter + 1];
	if ([UserAreaPagep + counter] == 1) then					//if semaphore then increase the process count
		[SEMAPHORE_TABLE + 4 * [UserAreaPagep + counter + 1] + 1] = [SEMAPHORE_TABLE + 4 * [UserAreaPagep + counter + 1] + 1];
	endif;
	counter = counter + 2;
endwhile;

counter = 0; 					//Disk map table
while(counter < 10) do
	[DISK_MAP_TABLE + childpid*10 + counter] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + counter];
	counter = counter + 1;
endwhile;

alias pagenum R7;
counter = 0;
while(counter < 16) do				//uptil stack page
	if(counter % 2 == 0) then
		pagenum =  [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + counter];
		[MEMORY_FREE_LIST + pagenum] = [MEMORY_FREE_LIST + pagenum] + 1;
	endif;
	[PAGE_TABLE_BASE + 20*childpid + counter] = [PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + counter];
	counter = counter + 1;
endwhile;
alias stack1p R2;
alias stack2p R3;
alias stack1c R5;
alias stack2c R6;
stack1p = ([PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 16] * 512);
stack2p = ([PAGE_TABLE_BASE + 20*[SYSTEM_STATUS_TABLE + 1] + 18] * 512);
stack1c = ([PAGE_TABLE_BASE + 20*childpid + 16] * 512);
stack2c = ([PAGE_TABLE_BASE + 20*childpid + 18] * 512);
counter = 0;
while (counter < 512) do
	[stack1c + counter] = [stack1p + counter];
	[stack2c + counter] = [stack2p + counter];
	counter = counter + 1;
endwhile;
//return value for child process
alias stack R3;
alias ptbr R4;
stack = [PROCESS_TABLE + (childpid * 16) + 13];
ptbr = [PROCESS_TABLE + (childpid * 16) + 14];
[[ptbr + 2 * ((stack - 1) / 512)] * 512 + ((stack - 1) % 512)] = 0;
//return value for parent process
stack = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[[PTBR + 2 * ((stack - 1) / 512)] * 512 + ((stack - 1) % 512)] = childpid;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
//putting BP register on top of child kernel stack
[[PROCESS_TABLE + (childpid * 16) + 11]*512] = BP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;
