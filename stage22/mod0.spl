alias functionNum R1;
alias currentPID R2;

if(functionNum ==8)
then
	while ([TERMINAL_STATUS_TABLE] ==1) do  //the current process shoul wait in a loop until the terminal is free
	
		[PROCESS_TABLE + (currentPID *16) + 4] =WAIT_TERMINAL; //current process state changed
		multipush(R1,R2); 

		call MOD_5; //calling scheduler

		multipop(R1,R2);
	endwhile;
	
	[TERMINAL_STATUS_TABLE] =1;
	[TERMINAL_STATUS_TABLE +1 ] =currentPID;
	
	return;
endif;

if(functionNum ==9) then

	if(currentPID != [TERMINAL_STATUS_TABLE +1 ]) //current pid should be same to the pid in terminal status table
	then
		R0=-1;
		return;
	endif;
	
	[TERMINAL_STATUS_TABLE] =0;
	
	alias count R7;
	count = 0;
	while(count <16) do
	
		if( ([PROCESS_TABLE + (count *16) + 1] > 0) &&   ([PROCESS_TABLE + (count *16) + 4] ==WAIT_TERMINAL))
		then
			 [PROCESS_TABLE + (count *16) + 4] =READY;
		endif;
		
		count = count +1;
	endwhile;
	R0 = 0;
	return;
endif;

//Acquire Disk

if(functionNum == 3) then
	while([DISK_STATUS_TABLE] == 1) do
	
		[PROCESS_TABLE + (currentPID *16) + 4] =WAIT_DISK;
		
		multipush(R1,R2); 

		call MOD_5; //calling scheduler

		multipop(R1,R2);
		
	endwhile;
	
	[DISK_STATUS_TABLE] =1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	return;
endif;

//Aquire semaphore
if(functionNum == 6) then 
	
	alias counter R3;
	alias flag R0;
	
	flag = -1;
	counter = 0;
	
	while(counter < 32) do
		if([SEMAPHORE_TABLE + counter * 4 + 1] ==0) then
			flag = counter;
			[SEMAPHORE_TABLE + counter * 4 + 1] = 1;
			[SEMAPHORE_TABLE + counter * 4] =-1;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	return;
endif;


//Release semaphore

if(functionNum == 7) then
	alias semid R3;
	if([SEMAPHORE_TABLE + semid * 4] == currentPID) then
		[SEMAPHORE_TABLE + semid * 4] = -1;
		alias counter R4;
		counter = 1;
		while(counter < 16 ) do
			if([PROCESS_TABLE + (counter*16)+4] == WAIT_SEMAPHORE && [PROCESS_TABLE + (counter*16)+5] == semid) then
				[PROCESS_TABLE + (counter * 16) + 4] = READY;
				[PROCESS_TABLE + (counter * 16) + 5] = 0;
			endif;
			counter = counter +1;
		endwhile;
	endif;
	
	[SEMAPHORE_TABLE + semid * 4 + 1] = [SEMAPHORE_TABLE + semid * 4 + 1] -1;
	return;
endif;
