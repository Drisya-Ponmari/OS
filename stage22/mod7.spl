//load the library 
loadi(63,13);
loadi(64,14);

loadi(6, 19);                       // Load disk interrupt handler
loadi(7, 20);

//load interrupt 8 --fork
loadi(18,31);
loadi(19,32);


//load interrupt 15
loadi(32,45);
loadi(33,46);

//load interrupt 11
loadi(24,37);
loadi(25,38);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

//Load Disk free list
loadi(61,2);

//load init program
loadi(65,7);
loadi(66,8);

//load interrpt -10 routine
loadi(22,35);
loadi(23,36);

//load exception handler
loadi(2,15);
loadi(3,16);

//load timer interrupt routine
loadi(4,17);
loadi(5,18);

//load interrupt - 7 routine
loadi(16,29);
loadi(17,30);

//load interrupt 6 routine
loadi(14,27);
loadi(15,28);

//load console interrupt routine 
loadi(8,21);
loadi(9,22);

//load context switch module(module_5)
loadi(50,63);
loadi(51,64);

//load int 9 routine
loadi(20,33);
loadi(21,34);

//load module 1 process manager
loadi(42,55);
loadi(43,56);

//load module 2 memory manager
loadi(44,57);
loadi(45,58);

//load memory copy of inode table
loadi(59,3);
loadi(60,4);

loadi(28,41);		//interrupt 13
loadi(29,42);

loadi(30,43);		//interrupt 14
loadi(31,44);	

[DISK_STATUS_TABLE] = 0; 
//Initialising the status field
[TERMINAL_STATUS_TABLE] =0;
//init program
PTBR=PAGE_TABLE_BASE + 20;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

PTLR = 10;
//User Area Page Number
[PROCESS_TABLE + 16 + 11] = 80;

//user stack pointer
[PROCESS_TABLE + 16 + 13] = 8*512;

//kptr
[PROCESS_TABLE + 16 + 12] = 0;

//PTBR
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;

//PTLR
[PROCESS_TABLE + 16 + 15] = 10;

//State
[PROCESS_TABLE + 16 + 4] = CREATED;

//Process Id
[PROCESS_TABLE + 16 + 1] = 1;

[76*512] = [65*512+1];


alias counter R0;

//Initialise the disk map table 

[DISK_MAP_TABLE + 2] = 78;
[DISK_MAP_TABLE + 3] = 79;
[DISK_MAP_TABLE + 4] = 65;
[DISK_MAP_TABLE + 5] = 66;
[DISK_MAP_TABLE + 6] = -1;
[DISK_MAP_TABLE + 7] = -1;
[DISK_MAP_TABLE + 8] = 76;
[DISK_MAP_TABLE + 9] = 77;

counter = 2;
while(counter <16) do
	[PROCESS_TABLE + (counter*16) + 4] = TERMINATED;
	counter = counter + 1;
endwhile;

counter = 0;
while(counter < 83) do
	[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

while(counter < 128) do
	[MEMORY_FREE_LIST + counter] = 0;
	counter = counter + 1;
endwhile;

//Initialising per-process  resource table
alias proctable R2;
proctable = PROCESS_TABLE + 16;

counter = 496;
while(counter < 512) do                                                   

    [[proctable + 11] * 512 + counter] = -1;                           // Resource Id
    [[proctable + 11] * 512 + counter + 1] = -1;                       
    counter = counter + 2;

endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = 46;
//semaphore table
counter = 0;
while(counter < 32) do
	[SEMAPHORE_TABLE + 4*counter] = -1;
	[SEMAPHORE_TABLE + 4*counter + 1] = 0;
	counter = counter + 1;
endwhile;
return;
