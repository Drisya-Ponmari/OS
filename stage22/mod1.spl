alias functionNum R1; 

		//Exit process
if(functionNum == 3) then

		if([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9] !=9) then
			alias count R5;
			count=1;
			while(count < 16) do
			
				if([PROCESS_TABLE + (count * 16) +4] == WAIT_PROCESS && [PROCESS_TABLE + (count * 16) +5] == [SYSTEM_STATUS_TABLE + 1]) then
				[PROCESS_TABLE + (count * 16) +4] = READY;
				endif;
				if([PROCESS_TABLE + (count * 16) +2] == [SYSTEM_STATUS_TABLE + 1]) then
				[PROCESS_TABLE + (count * 16) +2] = -1;
				endif;
			count = count + 1;
			endwhile;
		endif;
		alias currentPID R2;
		multipush(R0,R1,R2);
		R1 = 4;
		R2 = currentPID;
		call MOD_1;

		R1 = 2;
		R2 = currentPID;
		call MOD_1;
		multipop(R0,R1,R2);
		[PROCESS_TABLE + (currentPID* 16) + 4] = TERMINATED;
		return;
		
endif;

if(functionNum == 4) then           // Free Page Table

    alias PID R2;               

    alias page_table R3;
    page_table = PAGE_TABLE_BASE + PID * 20;

    [page_table + 0] = -1;      
    [page_table + 1] = "0000";
    [page_table + 2] = -1;
    [page_table + 3] = "0000";
    
    alias i R4;
    i = 4;

    alias pageDel R5;           // Would store page no of page to be deallocated

    while(i < 20) do

        if([page_table + i] != -1) then             // If page was valid, deallocate it
            
            pageDel = [page_table + i];
            multipush(R1, R2, R3, R4);
            R1 = 2;
            R2 = pageDel;
            call MOD_2;
            multipop(R1, R2, R3, R4);

            [page_table + i] = -1;
            [page_table + i + 1] = "0000";

        endif;

        i = i + 2;

    endwhile;

    // Heap
    i = 2;                  // Release any heap pages present in the disk
    while(i <= 3) do
        if([DISK_MAP_TABLE + 10 * PID + i] != -1) then  // If heap page is stored in some block, do the following

            R6 = [DISK_MAP_TABLE + 10 * PID + i];      
            R7 = PID;                                   
            multipush(R1, R2, R3, R4, R5);              
            R1 = 4;                                     
            R2 = R6;                                    
            R3 = R7;                                    
            call MOD_2;                        
            multipop(R1, R2, R3, R4, R5);               
        
        endif;
        i = i + 1;
    endwhile;

    // Stack
    i = 8;                  
    while(i <= 9) do
        if([DISK_MAP_TABLE + 10 * PID + i] != -1) then  
            
            R6 = [DISK_MAP_TABLE + 10 * PID + i];      
            R7 = PID;                                   

            multipush(R1, R2, R3, R4, R5);              
            R1 = 4;                                     
            R2 = R6;                                    
            R3 = R7;                                    
            call MOD_2;                        
            multipop(R1, R2, R3, R4, R5);               
        
        endif;
        i = i + 1;
    endwhile;

    // Invalidate all entries in the disk map Table
    i = 2;
    while(i <= 9) do
        [DISK_MAP_TABLE + 10 * PID + i] = -1;           // Invalidate entry
        i = i + 1;
    endwhile;

    return;

endif;
		//free user area page

if(functionNum == 2) then 
		alias currentPID R2;
		alias uaPageNum R3;
		uaPageNum = [PROCESS_TABLE + (currentPID* 16) + 11];
		multipush(R0,R1,R2,R3);
		R1 = 2;
		R2 = uaPageNum;
		call MOD_2;
		multipop(R0,R1,R2,R3);
		return;
endif;


	//Get pcb Entry
if(functionNum == 1) then
	alias ptindex R4 ;
	ptindex = 1;
	
	while( ptindex < MAX_PROC_NUM ) do
	
		if (  [PROCESS_TABLE + ptindex * 16 + 4] == TERMINATED ) then
		[PROCESS_TABLE + ptindex * 16 + 1] = ptindex;    			//Set the PID to index of the entry
		[PROCESS_TABLE + ptindex * 16 + 4] = ALLOCATED;				//Set the STATE to (ALLOCATED, - )
		[PROCESS_TABLE + ptindex * 16 + 14] = PAGE_TABLE_BASE + 20 * ptindex;	//Set PTBR to PAGE_TABLE_BASE + 20*index 
		[PROCESS_TABLE + ptindex * 16 + 15] = 10;				//PTLR
 		R0 = ptindex;
		return;
		endif; 
		ptindex = ptindex + 1; 
	endwhile;
	
		R0 = -1;
		return;
	
	
endif;
