
[PROCESS_TABLE+ ([SYSTEM_STATUS_TABLE+1]*16) + 9 ] =7; 				//read system call number

										//save the value os register SP
alias userSP R0;
userSP = SP;
										
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13 ] = SP;			//Store the value of register SP in UPTR

										
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16 ) + 11 ] * 512 -1;	//kernel statck



										//Retrieving fileDescriptor
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;

fileDescPhysicalAddr = (physicalPageNum * 512) + offset;

alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

if (fileDescriptor != -1)
then
	 alias physicalAddrRetVal R5;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
else
	alias word R6;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	
	multipush(R0,R1,R2,R3,R4,R5,R6);
	R1 = 4;  								//function number for terminal read
	R2 = [SYSTEM_STATUS_TABLE + 1]; 					//current pid
	R3 = word;								//word address
	call MOD_4;    								//call Device manager module
	multipop(R0,R1,R2,R3,R4,R5,R6);
	
	
	alias physicalAddrRetVal R7;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
SP=userSP;

ireturn;	
